// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.springsource.roo.inspect.domain;

import com.springsource.roo.inspect.domain.InspectTable;
import com.springsource.roo.inspect.domain.InspectTableDataOnDemand;
import com.springsource.roo.inspect.domain.RolesDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect InspectTableDataOnDemand_Roo_DataOnDemand {
    
    declare @type: InspectTableDataOnDemand: @Component;
    
    private Random InspectTableDataOnDemand.rnd = new SecureRandom();
    
    private List<InspectTable> InspectTableDataOnDemand.data;
    
    @Autowired
    RolesDataOnDemand InspectTableDataOnDemand.rolesDataOnDemand;
    
    public InspectTable InspectTableDataOnDemand.getNewTransientInspectTable(int index) {
        InspectTable obj = new InspectTable();
        setCreatetime(obj, index);
        setOrganization(obj, index);
        setResults(obj, index);
        setStandard(obj, index);
        setTname(obj, index);
        return obj;
    }
    
    public void InspectTableDataOnDemand.setCreatetime(InspectTable obj, int index) {
        Date createtime = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setCreatetime(createtime);
    }
    
    public void InspectTableDataOnDemand.setOrganization(InspectTable obj, int index) {
        String organization = "organization_" + index;
        obj.setOrganization(organization);
    }
    
    public void InspectTableDataOnDemand.setResults(InspectTable obj, int index) {
        String results = "results_" + index;
        obj.setResults(results);
    }
    
    public void InspectTableDataOnDemand.setStandard(InspectTable obj, int index) {
        String standard = "standard_" + index;
        obj.setStandard(standard);
    }
    
    public void InspectTableDataOnDemand.setTname(InspectTable obj, int index) {
        String tname = "tname_" + index;
        obj.setTname(tname);
    }
    
    public InspectTable InspectTableDataOnDemand.getSpecificInspectTable(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        InspectTable obj = data.get(index);
        Long id = obj.getId();
        return InspectTable.findInspectTable(id);
    }
    
    public InspectTable InspectTableDataOnDemand.getRandomInspectTable() {
        init();
        InspectTable obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return InspectTable.findInspectTable(id);
    }
    
    public boolean InspectTableDataOnDemand.modifyInspectTable(InspectTable obj) {
        return false;
    }
    
    public void InspectTableDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = InspectTable.findInspectTableEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'InspectTable' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<InspectTable>();
        for (int i = 0; i < 10; i++) {
            InspectTable obj = getNewTransientInspectTable(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
